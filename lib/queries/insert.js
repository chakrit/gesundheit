// Generated by CoffeeScript 1.4.0
var BaseQuery, Insert, InsertQuery, SelectQuery, fluid, method, returnable, toField, _i, _len, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

returnable = require('./returnable');

BaseQuery = require('./base');

SelectQuery = require('./select');

_ref = require('../nodes'), Insert = _ref.Insert, toField = _ref.toField;

module.exports = InsertQuery = (function(_super) {

  __extends(InsertQuery, _super);

  /*
    Insert queries are much simpler than most query types: they cannot join
    multiple tables.
  */


  function InsertQuery() {
    return InsertQuery.__super__.constructor.apply(this, arguments);
  }

  InsertQuery.rootNode = Insert;

  returnable(InsertQuery);

  InsertQuery.prototype.addRows = function(rows, variadic) {
    /* Add multiple rows of data to the insert statement.
    */

    var row, _i, _len, _results;
    if (variadic != null) {
      console.warn("DEPRECATED: InsertQuery::addRows will not be variadic in a future release.", new Error().stack.split('\n').slice(1).join('\n'));
      rows = Array.prototype.slice.call(arguments);
    }
    _results = [];
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      _results.push(this.q.addRow(row));
    }
    return _results;
  };

  InsertQuery.prototype.addRow = function(row) {
    /* Add a single row
    */
    return this.q.addRow(row);
  };

  InsertQuery.prototype.from = function(query) {
    /* Insert from a select query.
    */
    return this.q.from(query.q || query);
  };

  return InsertQuery;

})(BaseQuery);

fluid = require('../decorators/fluid');

_ref1 = ['addRow', 'addRows', 'from', 'returning'];
for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
  method = _ref1[_i];
  InsertQuery.prototype[method] = fluid(InsertQuery.prototype[method]);
}
