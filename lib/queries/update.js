// Generated by CoffeeScript 1.4.0
var SUDQuery, Update, UpdateQuery, binaryOp, fluid, method, returnable, toField, toParam, variadic, _i, _len, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

returnable = require('./returnable');

SUDQuery = require('./sud');

_ref = require('../nodes'), Update = _ref.Update, binaryOp = _ref.binaryOp, toField = _ref.toField, toParam = _ref.toParam;

module.exports = UpdateQuery = (function(_super) {

  __extends(UpdateQuery, _super);

  /*
    The update query is a little underpowered right now, and can only handle
    simple updates of a single table.
  */


  function UpdateQuery() {
    return UpdateQuery.__super__.constructor.apply(this, arguments);
  }

  UpdateQuery.rootNode = Update;

  returnable(UpdateQuery);

  UpdateQuery.prototype.set = function(data) {
    /*
        Add fields to the SET portion of this query.
    
        :param data: An object mapping fields to values. The values will be passed
          to :func:`nodes::toParam` to be converted into bound paramaeters.
    */

    var field, value, _results;
    _results = [];
    for (field in data) {
      value = data[field];
      _results.push(this.q.updates.addNode(binaryOp(toField(field), '=', toParam(value))));
    }
    return _results;
  };

  UpdateQuery.prototype.setNodes = function(nodes) {
    /* Directly push one or more nodes into the SET portion of this query
    */

    var _ref1;
    return (_ref1 = this.q.updates).push.apply(_ref1, nodes);
  };

  UpdateQuery.prototype.defaultRel = function() {
    return this.q.relation;
  };

  return UpdateQuery;

})(SUDQuery);

fluid = require('../decorators/fluid');

variadic = require('../decorators/variadic');

UpdateQuery.prototype.setNodes = variadic(UpdateQuery.prototype.setNodes);

_ref1 = ['set', 'setNodes', 'returning'];
for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
  method = _ref1[_i];
  UpdateQuery.prototype[method] = fluid(UpdateQuery.prototype[method]);
}
